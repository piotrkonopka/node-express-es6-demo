#!/usr/bin/env node

const app = require('../app'),
    debug = require('debug')('test-project-node-express:server'),
    http = require('http');

let normalizePort = (val) => {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
};

let onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

let onListening = () => {
    let addr = server.address();
    let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
    debug('Listening on ' + bind);
};

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app),
    io = require('socket.io').listen(server);

let loggedUsers = 0;

io.on('connection', (socket) => {
    let userLogged = false;

    socket.on('disconnect', () => {
        if (userLogged) {
            --loggedUsers;

            socket.broadcast.emit('user left', {
                username: socket.username,
                loggedUsers: loggedUsers
            });
        }
    });

    socket.on('new message', (data) => {
        socket.broadcast.emit('new message', {
            user: { username: socket.username, avatar: data.avatar },
            message: data.message,
            date: new Date().toUTCString()
        });
    });

    socket.on('add user', (username) => {
        if (userLogged) {
            return; 
        }

        socket.username = username;
        ++loggedUsers;
        userLogged = true;
        
        socket.emit('login', {
            loggedUsers: loggedUsers
        });
        
        socket.broadcast.emit('user joined', {
            username: socket.username,
            loggedUsers: loggedUsers
        });
    });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
